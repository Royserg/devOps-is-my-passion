name: Release

on:
  push:
    branches:
      - production

jobs:
  create-draft-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-draft-release.outputs.result }}
      next_version: ${{ steps.get_next_version.outputs.next_version }}

    steps:
      - uses: actions/checkout@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: 7.9.0

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16.15

      - name: Get version
        id: get_next_version
        run: |
          echo "PACKAGE_VERSION=$(node -p "require('./package.json').version.split('-')[0]")" >> $GITHUB_ENV
          echo "::set-output name=next_version::$(node -p "require('./package.json').version.split('-')[0]")"

      - name: Create draft release
        id: create-draft-release
        uses: actions/github-script@v6
        with:
          # TODO: copy release body from generated release and insert into new release
          # OR Get reference to existing pre-release and, attach files and switch to full release :D
          script: |
            const releasesResp = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            })

            const { body } = releasesResp.data[0];

            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `v${process.env.PACKAGE_VERSION}`,
              body: body,
              draft: true,
              prerelease: false
            })

            return data.id

  build-app:
    needs: create-draft-release
    strategy:
      fail-fast: false
      matrix:
        # platform: [macos-latest, ubuntu-latest, windows-latest]
        platform: [macos-latest]
    env:
      next_version: ${{ steps.get_next_version.outputs.next_version }}

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2

      - run: |
        sed -i 's/..\/package.json/$next_version/g' "src-tauri/tauri.conf.json"

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: 7.9.0

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16.15
          cache: 'pnpm'

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update &&
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

      - name: Install app dependencies and build it
        run: pnpm install --frozen-lockfile && pnpm build

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-draft-release.outputs.release_id }}

  publish-release:
    runs-on: ubuntu-latest
    needs: [create-draft-release, build-app]

    steps:
      - name: Publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-draft-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
